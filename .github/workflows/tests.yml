name: Test astrovision package code

on:
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  black:
    name: Run black check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable

  flake8:
    name: Run flake8 check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Install test dependencies
      run: |
        poetry install --only test
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --show-source --statistics

  pytest:
    name: Run pytest check
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v4
    - uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: "test"
        python-version: "3.10"
        channels: conda-forge
    - name: Install GDAL and Poetry
      run: |
        conda install -n test gdal poetry -y
    - name: Show conda dependencies
      run: |
        conda info
        conda list
    - name: Show conda dependencies
      run: |
        conda activate "test"
        conda info
        conda list
    - name: Show conda dependencies
      run: |
        conda info
        conda list
    - name: Add poetry to PATH
      run: |
        export PATH="$PATH:$CONDA/envs/test/bin"
    - name: Install dependencies and package
      run: |
        poetry install --with test
    - name: Show final conda dependencies
      run: conda list
    - name: Show Poetry dependencies
      run: poetry show
    - name: Test with pytest
      run: |
        poetry run pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html

  version:
    name: Run version check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Check package version
      run: |
        pip install requests
        # Fetch the latest version from PyPI
        pypi_version=$(python -c "import requests; print(requests.get('https://pypi.org/pypi/astrovision/json').json()['info']['version'])")

        # Extract the version from your repository
        repo_version=$(awk -F'"' '/^version/ {print $2}' "pyproject.toml")

        # Compare the versions
        if dpkg --compare-versions "$pypi_version" "ge" "$repo_version"; then
            echo "Error: the repository package version has not been updated."
            exit 1
        else
            echo "Version has been updated."
        fi
